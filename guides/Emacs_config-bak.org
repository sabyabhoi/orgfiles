#+TITLE: Emacs Configuration
#+AUTHOR: Sabyasachi Bhoi
#+PROPERTY: header-args:emacs-lisp :tangle ~/.config/emacs/init.el

* Basic Configuration
#+begin_src emacs-lisp

(setq inhibit-startup-message t)

(menu-bar-mode -1)
(tool-bar-mode -1)
(scroll-bar-mode -1)

;; create temporary backups
(setq backup-directory-alist '((".*" . "/tmp")))
#+end_src

** Font configuration
#+begin_src emacs-lisp
(set-face-attribute 'default nil 
		    :font "JetBrains Mono Nerd Font"
		    :height 150)
#+end_src

** Line numbering
#+begin_src emacs-lisp
(column-number-mode)
(global-display-line-numbers-mode t)
(setq display-line-numbers-type 'relative)
#+end_src
 
*** Hide line numbering in certain modes
#+begin_src emacs-lisp
(dolist (mode '(term-mode-hook
		eshell-mode-hook))
  (add-hook mode (lambda() (display-line-numbers-mode nil))))
#+end_src

* Package Management
** Setting up package repositories
#+begin_src emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                         ("elpa" . "https://elpa.gnu.org/packages/")))

(package-initialize)
(unless package-archive-contents
 (package-refresh-contents))

;; Initialize use-package on non-Linux platforms
(unless (package-installed-p 'use-package)
   (package-install 'use-package))

(require 'use-package)
(setq use-package-always-ensure t)
#+end_src
 
** Evil mode
#+begin_src emacs-lisp
  (use-package evil
    :init
    (setq evil-want-integration t
          evil-want-keybinding nil
          evil-want-C-u-scroll t)
    :config 
    (evil-mode 1)
    (evil-set-leader 'normal (kbd "SPC"))
    (evil-define-key 'normal 'global (kbd "<leader>.") 'counsel-find-file)
    (evil-define-key 'normal 'global (kbd "<leader>oa") 'org-agenda)
  )
#+end_src

** Ivy mode
#+begin_src emacs-lisp
(use-package ivy
  :diminish
  :bind (("C-s" . swiper)
         :map ivy-minibuffer-map
         ("TAB" . ivy-alt-done)	
         ("C-l" . ivy-alt-done)
         ("C-j" . ivy-next-line)
         ("C-k" . ivy-previous-line)
         :map ivy-switch-buffer-map
         ("C-k" . ivy-previous-line)
         ("C-l" . ivy-done)
         ("C-d" . ivy-switch-buffer-kill)
         :map ivy-reverse-i-search-map
         ("C-k" . ivy-previous-line)
         ("C-d" . ivy-reverse-i-search-kill))
  :init
  (ivy-mode 1))
#+end_src
 
*** Ivy rich
#+begin_src emacs-lisp
(use-package ivy-rich
  :init
  (ivy-rich-mode 1))
#+end_src
 
** Counsel
#+begin_src emacs-lisp
(use-package counsel
  :bind (("M-x" . counsel-M-x)
	 ("C-x b" . counsel-switch-buffer)
	 ("C-x C-b" . counsel-switch-buffer)
	 ("C-x C-f" . counsel-find-file)))
#+end_src

** Doom modeline
#+begin_src emacs-lisp
  (use-package doom-modeline
    :ensure t
    :init (doom-modeline-mode 1))
#+end_src

#+RESULTS:

** Doom themes

#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  (setq doom-themes-enable-bold t)
  (setq doom-themes-enable-italic t)
  (load-theme 'doom-moonlight t)
  (doom-themes-org-config))
#+end_src

** Helpful
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src
 
** Which key
#+begin_src emacs-lisp
(use-package which-key
  :init (which-key-mode)
  :diminish which-key-mode
  :config
  (setq which-key-idle-delay 0.5))
#+end_src

** Rainbow delimiters
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src
 
** Company Mode
#+begin_src emacs-lisp
(use-package company
  :hook (after-init-hook . global-company-mode))
#+end_src

* Org mode
#+begin_src emacs-lisp
  (require 'org-tempo)

  (defun cb/org-mode-setup ()
    (org-indent-mode)
    (auto-fill-mode 0)
    (visual-line-mode 1)
    (setq evil-auto-indent nil)
    (display-line-numbers-mode 0)
    )

  (use-package org
    :hook (org-mode . cb/org-mode-setup)
    :config
    (setq org-agenda-files '("~/workspace/userfiles/orgfiles/journal/agenda.org"))
    (setq org-todo-keywords
          '((sequence "TODO(t)" "MEETING(m)" "WAIT(w)" "|" "DONE(d)")))
    (setq org-ellipsis " â–¾"
          org-hide-emphasis-markers t
          org-src-fontify-natively t)
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.1)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "JetBrains Mono Nerd Font" :weight 'medium :height (cdr face))))
#+end_src

** Org bullets
#+begin_src emacs-lisp
(use-package org-bullets
  :after org
  :hook (org-mode . org-bullets-mode))
#+end_src

** Visual fill
Used to decreases the overall width and center the contents
#+begin_src emacs-lisp
(defun cb/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
	visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . cb/org-mode-visual-fill))
#+end_src

** Org babel
#+begin_src emacs-lisp
(org-babel-do-load-languages
 'org-babel-load-languages
 '((emacs-lisp . t)
   (R . t)))

(setq org-confirm-babel-evaluate nil)

(use-package ess) ;; for R
#+end_src

** Org reveal
Presentations with org mode
#+begin_src emacs-lisp
(use-package ox-reveal)
#+end_src

** Org tree slide
#+begin_src emacs-lisp
(use-package org-tree-slide)
#+end_src

** Org present
#+begin_src emacs-lisp
(use-package org-present)
#+end_src

** Org ref
#+begin_src emacs-lisp
(use-package org-ref)
#+end_src

#+begin_src emacs-lisp
(setq bibtex-completion-bibliography '("~/workspace/userfiles/college/uni.bib"))
#+end_src

** Pomodoro
#+begin_src emacs-lisp
(setq org-clock-sound "/home/cognusboi/workspace/userfiles/dotfiles/config/scripts/scripts/sound.oga")
#+end_src

** org latex preview
#+begin_src emacs-lisp
(setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
#+end_src

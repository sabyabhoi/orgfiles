:PROPERTIES:
:ID:       6690a4d1-0f17-42d7-b5e7-c097f6db6352
:END:
#+title: Concurrency in Rust
#+filetags: :CS:

* Creating new threads
Use the =std::thread::spawn= function:
#+begin_src rust 
  use std::thread;
  use std::time::Duration;

  fn main() {
      thread::spawn(|| {
	  for i in 1..10 {
	      println!("Spawned thread: {}", i);
	      thread::sleep(Duration::from_millis(10));
	  }
      });
      for i in 1..5 {
	  println!("Main thread: {}", i);
	  thread::sleep(Duration::from_millis(10));
      }
  }
#+end_src

#+RESULTS:
: Main thread: 1
: Spawned thread: 1
: Main thread: 2
: Spawned thread: 2
: Main thread: 3
: Spawned thread: 3
: Main thread: 4
: Spawned thread: 4

** Wait for spawned threads to finish executing
As we've seen earlier, when the main thread finishes executing, all the spawned threads are killed. In order to wait for the spawned thread to finish execution, we use the =join= function:
#+begin_src rust
  use std::thread;
  use std::time::Duration;

  fn main() {
      let handle = thread::spawn(|| {
	  for i in 1..10 {
	      println!("Spawned thread {}", i);
	      thread::sleep(Duration::from_millis(1));
	  }
      });

      for i in 1..5 {
	  println!("Main thread {}", i);
	  thread::sleep(Duration::from_millis(1));
      }

      handle.join().unwrap();
  }
#+end_src

#+RESULTS:
#+begin_example
Main thread 1
Spawned thread 1
Main thread 2
Spawned thread 2
Main thread 3
Spawned thread 3
Main thread 4
Spawned thread 4
Spawned thread 5
Spawned thread 6
Spawned thread 7
Spawned thread 8
Spawned thread 9
#+end_example

[[id:4208e4ff-6603-46c1-a128-750757d7f217][Rust]]

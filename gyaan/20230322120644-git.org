:PROPERTIES:
:ID:       96cce535-c36b-442f-8f53-e3e0b7f011c5
:END:
#+title: Git
#+filetags: :CS:

In case you aren't using GUI wrappers for git, like the default vscode one or lazygit, this cheatsheet may be handy.

* Repository structure
- The *remote* repository is the MASTER repository.
- When we =git commit= a file, it gets committed to the *local repository*.

To bring files from the remote repository to the local one:
#+begin_src shell
git fetch
#+end_src

To bring files from the local repository to the working directory:
#+begin_src shell
git merge
#+end_src

To /directly/ bring the files from the remote repo to the working directory:
#+begin_src shell
git pull
#+end_src

* Updating details
To change/update the username and email:
#+begin_src shell
git config --global user.name "username"
git config --global user.email "username"
#+end_src

To check these details:
#+begin_src shell
git config --global --list
#+end_src

* Staging and unstaging files
To stage files:
#+begin_src shell
git add <files>
#+end_src

To unstage files:
#+begin_src shell
git reset <files>
#+end_src

** Staging multiple files
If you want to stage /all/ the files that have changed in your *current* directory,
#+begin_src shell
git add .
#+end_src

This will only stage files that have changed in the current directory. To stage
the files changed in the *root* directory,
#+begin_src shell
git add -A
#+end_src

* Committing
After staging the files, to create a simple commit:
#+begin_src shell
git commit -m "commit message"
#+end_src

To open the commit file in your text editor:
#+begin_src shell
git commit
#+end_src

If you want to add all the changed files and commit them in a single command:
#+begin_src shell
git commit -a -m "commit message"
#+end_src
*Note:* The =-a= flag doesn't track new files.

* Reverting
If we run the following command:
#+begin_src shell
git revert <hash>
#+end_src

It reverts the changes made in that commit *only*; meaning the changes made in the
subsequent commits don't get deleted.

To undo the most recent commit:
#+begin_src shell
git revert HEAD
#+end_src

* Log
Use =git log= to view the details of the latest commits:
#+begin_src
git log
#+end_src

To have a single-line version:
#+begin_src shell
git log --oneline
#+end_src

To have a nice graph view:
#+begin_src shell
git log --graph
#+end_src

** Searching the logs
To search the commits wherein a certain change was made, we can use the =-S= flag.

For example, if we want to search all the commits wherein a function call =add(a, b)=
was changed:
#+begin_src shell
git log -S "add(a, b)"
#+end_src

* Reflog
Reference logs record when the branches and the other references
were updated in the local repository.
#+begin_src shell
git reflog
#+end_src

* Branches
To see all the current branches:
#+begin_src shell
git branch
#+end_src
*Note*: Use the =-v= or =-vv= flags to have a more detailed view of the branches.

To create a new branch:
#+begin_src shell
git checkout -b <branch name>
#+end_src

To merge one branch into the other, first go to the branch where you want to
merge the branches, and then use git merge:
#+begin_src shell
git merge <branch name>
#+end_src

Sometimes, while working in a certain branch, it is possible to make many small
commits, which can be irrelevant to the commits made in the master branch. Hence,
we have the ability to *squash* many commits into a single commit using the
=--squash= flag:
#+begin_src shell
git merge <branch name> --squash
#+end_src

** Stashing
If we want to save some work for later, we can *stash* all the changes in the
current branch:
#+begin_src shell
git stash
#+end_src

By running this command, all the changes you've made will disappear, and the
working directory will be at par with the latest commit. These changes have
been saved for later.

To recover those changes:
#+begin_src shell
git stash pop
#+end_src

** Pruning
Suppose we're finished working on a branch and we delete it in the remote
repository, but it's still there in the local repository (HEAD), then we
can automatically delete all such dead branches by pruning them:
#+begin_src shell
git remote update --prune
#+end_src

Now when we run =git branch -vv=, we'll see a =gone= phrase next to the pruned
branches. In order to remove this branch just pass in the branch name to
=git branch= with =-d= flag:
#+begin_src shell
git branch -d <branch name>
#+end_src

*Note*: Here's a simple sequence of commands to automatically delete all the
=gone= branches:
#+begin_src shell
git branch -vv | awk '/: gone]/{print $1}' | xargs git branch -d
#+end_src

* Comparing changes
Use =git diff= to compare changes. I'm not going to type out anything here, since
the =git help diff= page is sufficient.
* Bisect
The =git bisect= sub-command uses a binary search algorithm to track down which
commit introduced a bug. Suppose you know that a certain commit didn't contain
any bugs, but the latest commit (HEAD) contains some bug.

1. Start off =git bisect=:
#+begin_src shell
git bisect start
#+end_src

2. Mark the latest commit as /bad/ commit.
#+begin_src shell
git bisect bad <hash>
#+end_src
Here, we can omit the hash, so git will take the latest commit by default.

3. Mark the commit without any bug as a /good/ commit.
#+begin_src shell
git bisect good <hash>
#+end_src

Upon running this command, the current branch will be switched to the branch
exactly in the middle of the good and bad branches. Now we can check whether
the current branch is good or bad:
    1. If the current branch is /bad/ then it'll just recurse.
    2. If the current branch is /good/ it'll stop recursing and print details of
       the commit wherein the bug was introduced.
* The most important command you'll ever use
If we want to discard all the changes we've made in the local repository,
and just pull down the latest commit from the remote repository:
#+begin_src shell
git reset --hard origin/main
#+end_src
Here, =main= is the current working branch.

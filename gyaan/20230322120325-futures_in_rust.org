:PROPERTIES:
:ID:       abb5f4ca-045e-40e9-ba83-017c4d2fb2ac
:END:
#+title: Futures in Rust
#+filetags: :CS:

* Basics

Consider a simple =async= function in [[id:4208e4ff-6603-46c1-a128-750757d7f217][Rust]]:
#+begin_src rust
async fn foo() -> usize {
    println!("Hello there");
    0
}
#+end_src

This is equivalent to the following function:
#+begin_src rust
use std::future::Future;

fn foo() -> impl Future<Output = usize> {
    async {
        println!("Hello there");
        0
    }
}
#+end_src

The type =Future<Output = usize>= implies that the function /doesn't/ return a =usize=
right away, but returns a type that will *eventually* turn into a =usize=.

Now if we call this function normally:
#+begin_src rust
let x: Future<Output = usize> = foo();
#+end_src

nothing happens. We don't get ="Hello there"= printed to the screen. That's because
=async= functions don't do anything until they're awaited.

* The select! macro
Consider a program where you're waiting for the user to enter some input into
the terminal and at the same time waiting for a socket connection to establish.
#+begin_src rust
let network: Future<Output = ()> = read_from_network();
let terminal: Future<Output = ()> = read_from_terminal();

select! {
    stream <- network.await => {
        // TODO: network operations on the stream
    }
    line <- terminal.await => {
        // TODO: line operations on the terminal
    }
}
#+end_src

What the =select!= macro does is that it tries to make progress on the =network=
Future, and if it is successful, it returns the stream and calls the code inside
the code inside the parenthesis. It does the same with the =terminal= Future, and
returns the one which executes earlier. If neither of them make any progress,
then it yeilds and tries again in the next operation.

* Executing Futures
We're only allowed to =await= =async= functions in =async= blocks. Since the main function
isn't allowed to be an =async= function, we can't directly run any =async= functions
in our program. This happens because something has to run the top-level Future
in a loop.
To make our lives easier, an executor crate (for example =tokio=) provides such an
executor loop for usage.
#+begin_src rust
#[tokio::main]
fn main() {
    // async await code can be executed here now
}
#+end_src

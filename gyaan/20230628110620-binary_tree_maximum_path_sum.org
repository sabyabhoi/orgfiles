:PROPERTIES:
:ID:       9432ae7a-07a6-4875-8243-1c7ec2bc90be
:ROAM_REFS: https://leetcode.com/problems/binary-tree-maximum-path-sum/description/
:END:
#+title: Binary Tree Maximum Path Sum
#+filetags: :CS:

A path in a binary tree is a sequence of nodes where each pair of adjacent nodes in the sequence has an edge connecting them. A node can only appear in the sequence at most once. Note that the path does not need to pass through the root.

The path sum of a path is the sum of the node's values in the path.

Given the root of a binary tree, return the maximum path sum of any non-empty path.

[[../assets/binary_tree_path_sum.jpg]]

#+begin_example
Input: root = [1,2,3]
Output: 6
Explanation: The optimal path is 2 -> 1 -> 3 with a path sum of 2 + 1 + 3 = 6.
#+end_example

* Solution

#+begin_src python
def maxPathSum(root: TreeNode) -> int:

    ans = - float('inf')
    def f(root: TreeNode):
        if not root:
            return 0

        left = max(f(root.left), 0)
        right = max(f(root.right), 0)

        with_split = root.val + left + right
        ans = max(ans, with_split)

        without_split = root.val + max(left, right)
        return without_split

    f(root)
    return ans
#+end_src

* Zettelkasten
** North: comes from
- [[id:a5f37e57-e61c-4a10-93cd-f3c87b44b064][Binary Tree]]

:PROPERTIES:
:ID:       cb7eda74-5f0d-4b23-ab28-34f1c57e7814
:END:
#+title: Haskell
#+filetags: :CS:

Haskell is a purely [[id:6aa4ce9e-aead-40d1-82ac-43bceb14ae00][functional programming language]]. An important implication of this is that the functions in haskell do not have any /side-effects/, i.e., they do not change the state of any variables they take as input. In case they wish to change the state of a variable, they simply return the altered variable.
A major problem with this is that altering the state of some values is inherently necessary to build real life programs. E.g. we need to change the state of the output device of the terminal in order to [[id:38331d56-70f4-45a1-9f6a-1479ac5a9a71][print stuff to it]].
In order to fix this, Haskell separates all the parts of the program with pure functional code from the impure functional code.

* Basic Syntax
- To run Haskell in an interpreter, use the [[https://www.haskell.org/ghc/][Glasgow Haskell Compiler]] Interpreter (ghci).
** Simple mathematical operations 
#+begin_src haskell
5 / 2
#+end_src

#+RESULTS:
: 2.5

*** Inbuilt maths functions
#+begin_src haskell
min 9 10
#+end_src

#+RESULTS:
: 9

#+begin_src haskell
max 5 (min 9 10)
#+end_src

#+RESULTS:
: 9

** (In)equality 
#+begin_src haskell
5 == 4
#+end_src

#+RESULTS:
: False

#+begin_src haskell
5 /= 4
#+end_src

#+RESULTS:
: True

* Set Comprehensions
We can simulate the use of set syntax from maths in Haskell:

$\{2 \cdot x | x \in \mathbb{N}, x \leq 10\}$

#+begin_src haskell
[2 * x | x <- [1..10]]
#+end_src

#+RESULTS:
| 2 | 4 | 6 | 8 | 10 | 12 | 14 | 16 | 18 | 20 |

** Adding predicates
We can add additional conditions in the sets called *predicates*.
#+begin_src haskell
[2 * x | x <- [1..10], 2 * x >= 12]
#+end_src

#+RESULTS:
| 12 | 14 | 16 | 18 | 20 |

** Multiple variables
#+begin_src haskell
[x * y | x <- [1..3], y <- [2..4]]
#+end_src

#+RESULTS:
| 2 | 3 | 4 | 4 | 6 | 8 | 6 | 9 | 12 |


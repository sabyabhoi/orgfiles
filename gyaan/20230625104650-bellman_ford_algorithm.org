:PROPERTIES:
:ID:       4072b134-cfe4-4b7e-8e0d-5e0891f53554
:ROAM_REFS: https://youtu.be/obWXjtg0L64
:END:
#+title:Bellman-Ford Algorithm
#+filetags: :CS:

The Bellman-Ford algorithm is about finding the shortest path in a weighted directed graph from a source vertex to all other vertices, taking into account negative edge weights and detecting negative weight cycles.

* Algorithm

1. The general idea is to go through all the vertices in order, updating their neighbours with the respective weights.
2. We need to do |V| - 1 such iterations, but can stop early if no change is observed in the distance array after an iteration.
#+begin_src python
def bellman_ford(adj, src):
    n = len(adj)
    dist = [float('inf')] * n
    dist[src] = 0
    
    for _ in range(n - 1):
        prev_dist = dist.copy()
        for curr in range(n):
            if dist[curr] == float('inf'):
                continue

            for (nei, wt) in adj[curr]:
                dist[nei] = min(dist[nei], dist[curr] + wt)

        if prev_dist == dist: # early stopping
            break

    return dist
#+end_src

** Checking for negative weight cycles
If you wish to check for negative weight cycles, then after running all the iterations, go through all the edges again and check if whether a shorter path can be formed. If it can be, then it means that \exists a negative edge. 

#+begin_src python
for curr in range(n):
    if dist[curr] == float('inf'):
        continue

    for (nei, wt) in adj[curr]:
        if dist[curr] + wt < dist[nei]:
            return -1
#+end_src

** Time complexity
O(|V| * |E|)

* Zettelkasten
** North: Comes from
[[id:5606497d-39ad-4cd6-aa86-bdb8055f0f23][Graph]]
** East: Similar to
It is similar to [[id:abcb832d-dbe2-4b50-99d0-38501f4555f4][Dijkstra's Algorithm]], but also works for negative weighted edges.

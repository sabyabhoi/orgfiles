:PROPERTIES:
:ID:       8ca64063-3b09-4767-bb2f-13f7acb5a42b
:END:
#+title: Three Sum
#+filetags: :CS:

Given an [[id:5adf9d6d-4832-420c-8c61-41d7747a47d1][array]] =a[n]=, we're supposed to find all the triplets whose sum equals 0. 

* Approach
1. Sort the array
2. For every element =a[i]=, use [[id:1bf4c645-deb7-44e6-babf-ce6ec4836311][Target sum in sorted array]] approach to find a pair whose sum equals to =-a[i]=
3. If any element is repeated, skip it.
#+begin_src c++
  vector<vector<int>> threeSum(vector<int>& a) {
    vector<vector<int>> ans;

    sort(a.begin(), a.end());
    int n = (int) a.size();

    for(int i = 0; i < n - 1; ++i) {
      if(i > 0 &&  a[i] == a[i - 1]) continue;
      int l = i + 1, r = n - 1, k = -a[i];
      while(l < r) {
        int s = a[l] + a[r];
        if(s == k) {
          ans.push_back({a[i], a[l], a[r]});
          while(l < r && a[l] == a[l + 1]) ++l;
          while(l < r && a[r] == a[r - 1]) --r;
          ++l, --r;
        }
        else if(s < k) l++;
        else r--;
      }
    }
    return ans;
  }
#+end_src

:PROPERTIES:
:ID:       556e2072-59f1-4d47-a7a7-2e724a53a0e4
:END:
#+title: BIOS

- When we booted the binary with the [[id:7bb493a3-c75a-4944-be1c-4e275a98ae0d][Boot sector]], we entered what is called *Real Mode*, which is a 16-bit mode assisted by *BIOS*.
- BIOS Stands for *Basic IO System*.
- It is a system which provides us with the simple tools to interact with our computer, like displaying characters on the screen, input characters from the keyboard, etc.

* Printing characters with BIOS
To print characters using the BIOS, we need to switch to the *Teletype Mode(TTY)*. We do this be using the =ax= register. 
#+begin_src asm
          mov ah, 0x0e
          mov al, 'A' ;; Move the letter to be printed into the al register
          int 0x10
#+end_src
On the last line, we call a [[id:7d3b0071-079e-4845-8157-d63737461e20][system interrupt]].

* Printing all the letters of the alphabet with BIOS
#+begin_src asm
          mov ah, 0x0e
          mov al, 'A'

  loop:
          int 0x10
          inc al
          cmp al, 'Z'
          jle loop 
#+end_src

* Working with Strings
We can use the [[id:8024afaa-5615-4264-aeac-1c21a638ea4f][db]], instruction to define a string:
#+begin_src asm
greetings:
  db "Hello sailor!", 0 ;; null-terminated string
#+end_src

In order to print it, we can use a pointer to the location of the string, and dereference it to get the data inside the string.
#+begin_src asm
  [org 0x7c00]
  mov ah, 0x0e
  mov al, [greetings]
  int 0x10
#+end_src

In the first line, we set the origin of the memory addressing to start from the address =0x7c00=, because for some weird reason that's where it starts from in BIOS rather than from =0=.

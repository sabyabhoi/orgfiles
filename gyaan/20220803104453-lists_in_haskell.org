:PROPERTIES:
:ID:       5846e4e1-2fb8-47c9-8020-d4fa588d4257
:END:
#+title: Lists in Haskell
#+filetags: :CS:

- Lists in [[id:cb7eda74-5f0d-4b23-ab28-34f1c57e7814][Haskell]] are implemented as singly [[id:58e01dcb-3b38-41dc-852d-777a5ec4cd2a][linked lists]].
- They are homogenous.
* General syntax
- To define a name in GHCI, we can use the =let= keyword. Doing =let a = 1= inside GHCI is the same as writing =a = 1= in a script and then loading it in GHCI.

#+begin_src haskell
let piDigits = [3, 1, 4, 1, 5, 9, 2, 6, 5, 3, 5, 8, 9, 7, 9];
piDigits
#+end_src

#+RESULTS:
| 3 | 1 | 4 | 1 | 5 | 9 | 2 | 6 | 5 | 3 | 5 | 8 | 9 | 7 | 9 |

* Function to generate list
Here we show a simple [[id:1fa4046d-8c5c-4acb-9494-1145db5bbc02][recursive]] [[id:7039543f-f0c6-4750-843d-5f9855f15394][function]] to generate a list:
#+begin_src haskell
gen :: Integer -> Integer -> [Integer]
gen l r
  | l > r = []
  | l == r = [r]
  | l < r = l : gen (l + 1) r
#+end_src

* Concatenating Lists
** To the end of the list
We make use of the =++= operator.
#+begin_src haskell
let a = [1, 3, 5, 7, 9];
let b = [11, 13, 15];
a ++ b
#+end_src

#+RESULTS:
: ghci> [1,3,5,7,9,11,13,15]

** To the beginning of the list
We make use of the =:= operator.
#+begin_src haskell
'A':" small cat"
#+end_src

#+RESULTS:
: A small cat

* Indexing elements
- We make use of the =!!= operator.
- Indexing in Haskell starts from =0=.

#+begin_src haskell
[1,3,4,5,8] !! 3
#+end_src

#+RESULTS:
: 5

* Comparing Lists
- Lists are compared in /lexicographical/ order in Haskell.

#+begin_src haskell
[3,2,1] > [1, 4, 0]
#+end_src

#+RESULTS:
: True

* Other List functions
** head
Returns the first element of the list.
#+begin_src haskell
head [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
: 1

** tail
Returns the entire list /excluding/ the first element.
#+begin_src haskell
tail [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
| 2 | 3 | 4 | 5 |

** last
Returns the last element of the list.
#+begin_src haskell
last [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
: 5

** init
Returns the entire list /excluding/ the last element.
#+begin_src haskell
init [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 |

** length
Duh.
#+begin_src haskell
length [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
: 5

** null
Checks if list is empty or not.
#+begin_src haskell
null [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
: False

** reverse
Reverses the list.
#+begin_src haskell
reverse [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
| 5 | 4 | 3 | 2 | 1 |

** take
- Returns the first =n= elements of the list.
- If =n= is greater than the length of the list, then it returns the entire list.
#+begin_src haskell
take 3 [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
| 1 | 2 | 3 |

** drop
Drops the first =n= elements of the list.
#+begin_src haskell
drop 3 [1, 2, 3, 4, 5]
#+end_src

#+RESULTS:
| 4 | 5 |

** sum, product, maximum, minimum
Duh.

** elem
Checks if element is in the list or not.
#+begin_src haskell
4 `elem` [3, 4, 5, 6]
#+end_src

#+RESULTS:
: True

* Texas range
- Range syntax in Haskell
#+begin_src haskell
[1..10]
#+end_src

#+RESULTS:
| 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10 |

#+begin_src haskell
['b'..'y']
#+end_src

#+RESULTS:
: bcdefghijklmnopqrstuvwxy


:PROPERTIES:
:ID:       7039543f-f0c6-4750-843d-5f9855f15394
:END:
#+title:Functions in Haskell
#+filetags: :CS:

* Basic Syntax
*Note*: Functions cannot begin with an uppercase letter in [[id:cb7eda74-5f0d-4b23-ab28-34f1c57e7814][Haskell]].
#+begin_src haskell
square x = x * x
square 10
#+end_src

#+RESULTS:
: 100

#+begin_src haskell
distance x y = sqrt (x * x + y * y)
distance 3 4
#+end_src

#+RESULTS:
: 5.0

** Types
We can explicitly mention the function types before the function definition:
#+begin_src haskell
in_range :: Integer -> Integer -> Integer -> Bool
in_range min max x = min <= x && x <= max
#+end_src

** Conditionals
#+begin_src haskell
maxBear age = (if age < 18 then 0 else round(sqrt age))
maxBear 20
#+end_src

#+RESULTS:
: 4

** let syntax
Suppose we wish to store the state of some variables inside the function. We can do so using the =let= keyword:
#+begin_src haskell
  in_range min max x =
    let lower_bound = min <= x
        upper_bound = max >= x
    in
    lower_bound && upper_bound
#+end_src

** where syntax
Another way of storing the state of some variables inside the function is to use the =where= binding:
#+begin_src haskell
  in_range min max x = lb && ub
    where
      lb = min <= x
      ub = max >= x
#+end_src

* Guards
:PROPERTIES:
:ID:       ca008108-abc4-4a4f-9a4b-ad1a85d32196
:END:
Similar to conditionals, if we wish to alter the behaviour of the function based on the input, we can use *Guards*:
#+begin_src haskell
maxBear age
  | age <= 18 = 0
  | otherwise = round(sqrt age)
#+end_src

* Pattern matching
:PROPERTIES:
:ID:       66408e11-85d2-4a73-a9f6-983a6f717eeb
:END:
[[id:cb7eda74-5f0d-4b23-ab28-34f1c57e7814][Haskell]] offers pattern matching to alter the behaviour of [[id:7039543f-f0c6-4750-843d-5f9855f15394][functions]] based on input:
#+begin_src haskell
fac :: Integer -> Integer
fac 0 = 1
fac 1 = 1
fac n = n * fac (n - 1)
#+end_src

** List Patterns
Pattern matching becomes powerful in context of [[id:5846e4e1-2fb8-47c9-8020-d4fa588d4257][Lists in Haskell]]:
#+begin_src haskell
my_sum :: [Int] -> Int
my_sum [] = 0
my_sum (x : xs) = x + my_sum xs
#+end_src

* Higher order functions
- A function that takes another function as an argument
- E.g.
#+begin_src haskell
app :: (a -> b) -> a -> b
app f x = f x

add1 :: Int -> Int
add1 x = x + 1

app add1 1
#+end_src

#+RESULTS:
: ghci> ghci> 2

** zipWith
A common function which takes in a function and two [[id:5846e4e1-2fb8-47c9-8020-d4fa588d4257][lists]], and combines the elements of the two lists using the function:
#+begin_src haskell
:t zipWith
#+end_src

#+RESULTS:
: zipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

#+begin_src haskell
zipWith (+) [1..3] [4..6]
#+end_src

#+RESULTS:
| 5 | 7 | 9 |

* Anonymous functions
:PROPERTIES:
:ID:       0fbd6308-a472-46b1-9f0d-83d0f7eabd10
:END:
- Functions with no names
- E.g.
#+begin_src haskell
(\x -> x + 1)
(\x y z -> x + y + z)
#+end_src

* Currying
:PROPERTIES:
:ID:       c34077a8-8131-4d3d-8871-66c0f5279da4
:END:
It is the idea in [[id:cb7eda74-5f0d-4b23-ab28-34f1c57e7814][Haskell]] that all function parameters can be broken down into sub functions:
#+begin_src haskell
add :: Int -> Int -> Int

add x y = x + y
add x = (\y -> x + y)
add = (\x -> (\y -> x + y))
#+end_src

** Partial Function Application
In the code mentioned above, the final code snippet:
#+begin_src haskell
add = (\x -> (\y -> x + y))
#+end_src

Suggests that the function =add= returns another function which takes a single argument and outputs a new function. Therefore, upon making the following function call:

#+begin_src haskell
add = (\x -> (\y -> x + y))
:t add 1 
#+end_src

#+RESULTS:
: add 1 :: Num a => a -> a

We get a new function.

* Function Composition
In [[id:cb7eda74-5f0d-4b23-ab28-34f1c57e7814][Haskell]], we can use the /dot/ operator "." to form composite functions. This means that =(f . g)= is the same as =(\x -> f (g x))=. 

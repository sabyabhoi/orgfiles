:PROPERTIES:
:ID:       a268f678-0426-46ed-8963-33bd2910ebc3
:END:
#+title: Find an element of two sorted arrays
#+filetags: :CS:

Given two sorted [[id:5adf9d6d-4832-420c-8c61-41d7747a47d1][arrays]] =a[m]= and =b[n]= and an element =k=. The task is to find the element that would be at the k^th position of the final sorted array.

* Solution
This problem is a generalized version of finding the [[id:08a8107b-44a2-4ba3-a4bc-9d4edc02b132][Median of two sorted arrays]]. Here as well we're going to apply [[id:53b8c21d-c96a-4e92-bbd7-7ff176bec026][Binary Search]]. 

The only difference here is the existence edge cases when considering the lower and upper bounds for the range:
- When =k < m=, then we set the upper bound to be =k=.
- When =k > n=, then we must consider *some* elements from =a[m]=; hence the lower bound is set to =k - n=.

#+begin_src c++
  double kthElement(const vi& a, const vi& b) {
    int m = (int) a.size(), n = (int) b.size();
    if(m > n)
      return kthElement(b, a);

    int l = max(0, k - n), r = min(k, m);
    while(l <= r) {
      int partA = l + (r - l) / 2;
      int partB = k - partA;

      int lA = partA <= 0 ? INT_MIN : a[partA - 1];
      int lB = partB <= 0 ? INT_MIN : b[partB - 1];
      int rA = partA >= m ? INT_MAX : a[partA];
      int rB = partB >= n ? INT_MAX : b[partB];

      if(lA <= rB && lB <= rA)
        return max(lA, lB);
      else if(lA > rB) r = partA - 1;
      else if(lB > rA) l = partA + 1;
    }
    return -1;
  }
#+end_src

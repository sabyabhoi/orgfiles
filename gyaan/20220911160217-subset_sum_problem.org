:PROPERTIES:
:ID:       d8cab1eb-aaf3-4373-bd03-9aabb9656cbf
:END:
#+title: Subset sum problem
#+filetags: :CS:

Consider an array ~a[n]~, and a number ~k~. We wish to find whether \exists a subset of ~a~ whose sum is equal to ~k~.

* Recursive approach
A naive approach can be formulated by employing logic similar to that of [[id:df129ee0-22bd-4718-b89d-85de5ac4fc38][0-1 Knapsack]]:
#+begin_src c++
  bool possible(const vector<int>& a, int n, int sum) {
    if(sum == 0) return true;
    if(n == 0) return false;

    if(a[n - 1] > sum) return possible(a, n - 1, sum);
    return possible(a, n - 1, sum) || possible(a, n - 1, sum - a[n - 1]);
  }
#+end_src

* [[id:79fd085c-e5b2-47f8-916e-034de5aba48e][DP]] approach
#+begin_src c++
  bool subsetSum(const vector<int>& a, int n, int sum) {
    // possible[n + 1][sum + 1]
    vector<vector<bool>> possible(n + 1, vector<bool>(sum + 1));

    FOR(i, 1, n + 1) {
      FOR(s, 1, sum + 1) {
        if(s == 0) {possible[i][s] = true; continue;}
        if(i == 0) {possible[i][s] = false; continue;}

        if(a[i - 1] > s)
          possible[i][s] = possible[i - 1][s];
        else
          possible[i][s] = possible[i - 1][s] || possible[i - 1][s - a[i - 1]];
      }
    }
    return possible[n][sum];
  }
#+end_src

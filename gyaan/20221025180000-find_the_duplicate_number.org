:PROPERTIES:
:ID:       567bb0d3-b588-4c80-b711-8f9b4f07e12e
:ROAM_REFS: https://takeuforward.org/data-structure/find-the-duplicate-in-an-array-of-n1-integers/
:END:
#+title: Find the Duplicate Number
#+filetags: :CS:

Given an [[id:5adf9d6d-4832-420c-8c61-41d7747a47d1][array]] =a[n+1]=, containing numbers from =0= to =n=, we're given that a number repeats exactly once. We're supposed to find that number.

* Trivial approach
We can [[id:6a9a5dae-f0b6-4b98-b93a-cfd7238f7595][sort]] the array and return the element which is equal to its adjacent element, or we can keep a hash set and check whether each element is already in the set or not.

* Optimal approach
Think about the elements as nodes of a [[id:58e01dcb-3b38-41dc-852d-777a5ec4cd2a][linked list]], where each node contains a number =x= from the array, and pointer points to a node containing the element =a[x]=. Since the number being repeated is going to be present at two different indices in the array, we'll have two nodes pointing at the node. This means that a loop will exist in the list. Hence, we're just supposed to detect the loop, and find the starting point of the loop. We can do so using [[id:b56836d5-2932-476d-b2a2-18c5c3192fbf][Floyd's Algorithm]].

#+begin_src c++
    int findDuplicate(const vector<int>& a) {
      int fast = a[0], slow = a[0];
      do {
        slow = a[slow];
        fast = a[a[fast]];
      } while(slow != fast);
      fast = a[0];
      while(fast != slow) {
        slow = a[slow];
        fast = a[fast];
      }
      return slow;
    }
#+end_src

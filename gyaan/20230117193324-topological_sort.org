:PROPERTIES:
:ID:       7df317f9-4e24-475e-a37d-38ff287dc8e8
:END:
#+title: Topological Sort
#+filetags: :CS:

Given a /Directed Acyclic/ [[id:5606497d-39ad-4cd6-aa86-bdb8055f0f23][Graph]] =G(V, E)=, a topologically [[id:6a9a5dae-f0b6-4b98-b93a-cfd7238f7595][sorted]] sequence is one in which for every pair of vertices =(u, v)=, =u= occurs before =v= in the sequence. 

* Using DFS
#+begin_src c++
  void dfs(const vvi& adj, int curr, stack<int>& st, vb& vis) {
    vis[curr] = true;

    for(int i : adj[curr]) {
      if(vis[i]) continue;
      dfs(adj, i, st, vis);
    }

    st.push(curr);
  }

  void solve() {
    int n, e; cin >> n >> e;
    vvi adj(n, vi());

    REP(i, e) {
      int a, b; cin >> a >> b;
      adj[a].push_back(b);
    }

    vb vis(n, false);
    stack<int> st;
    REP(i, n) {
      if(vis[i]) continue;
      dfs(adj, i, st, vis);
    }
    while(!st.empty()) {
      cout << st.top() << ' ';
      st.pop();
    }
    cout << '\n';
  }
#+end_src

* Using BFS
#+begin_src c++
  vi topoSort(int V, vi adj[]) 
  {
    // code here
    vi ans, in_degree(V, 0);
    queue<int> q;
        
    REP(i, V) {
      for(int j : adj[i]) in_degree[j]++;
    }
        
    REP(i, V) {
      if(in_degree[i] == 0) q.push(i);
    }
        
    while(!q.empty()) {
      int f = q.front();
      q.pop();
      ans.push_back(f);
            
      for(int i : adj[f]) {
        if(--in_degree[i] == 0) q.push(i);
      }
    }
    return ans;
  }
#+end_src

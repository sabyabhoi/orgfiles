:PROPERTIES:
:ID:       7df317f9-4e24-475e-a37d-38ff287dc8e8
:END:
#+title: Topological Sort
#+filetags: :CS:

Given a /Directed Acyclic/ [[id:5606497d-39ad-4cd6-aa86-bdb8055f0f23][Graph]] =G(V, E)=, a topologically [[id:6a9a5dae-f0b6-4b98-b93a-cfd7238f7595][sorted]] sequence is one in which for every pair of vertices =(u, v)=, =u= occurs before =v= in the sequence. 

* Using DFS
Using a [[id:3f4d8da3-a131-4e3a-9fe9-78009dba3164][Stack]]
#+begin_src python
def topoSort(adj: List[List[int]]) -> List[int]:
    n = len(adj)

    vis = [False] * n
    st = stack()

    def dfs(curr):
        vis[curr] = true

        for next in adj[curr]:
            if vis[next]: continue
            dfs(next)

        st.push(curr)

    for i in range(n):
        if not vis[i]:
            dfs(i)

    return list(st)
#+end_src

* Using BFS
This is called *Kahn's Algorithm* (Using a [[id:e1ba462d-51b3-4b75-be27-e236065922cd][Queue]])

#+begin_src python
def topoSort(adj: List[List[int]]) -> List[int]:
    n = len(adj)

    # Create in_degree array
    in_degree = [0] * n
    for i in range(n):
        for nei in adj[i]:
            in_degree[nei] += 1

    q = Queue()
    # Push vertices with in_degree = 0
    for i in range(n):
        if in_degree[i] == 0:
            q.push(i)

    ans = []
    while q:
        curr = q.pop()
        ans.append(curr)
        
        for nei in adj[curr]:
            in_degree[nei] -= 1
            if in_degree[nei] == 0:
                q.push(nei)

    return ans
#+end_src


:PROPERTIES:
:ID:       9d0c5d26-0aed-4ec7-9df5-0e4dc8b6dd4b
:END:
#+title: Unbounded Knapsack
#+filetags: :CS:

This is a type of [[id:e8089b0e-fdc0-4ae6-a873-a2c75cf2410b][Knapsack problem]] in which we have unlimited supply of each item in the set of items. We can add the same item again.

* Approach
The approach is exactly the same as that of [[id:df129ee0-22bd-4718-b89d-85de5ac4fc38][0-1 Knapsack]]. The only point where it differs is when we make the choice of accepting/rejecting an item. If we reject an item, then it is the same as [[id:df129ee0-22bd-4718-b89d-85de5ac4fc38][0-1 Knapsack]], but if we accept it, then we can use the same item again, so we don't reduce the size of the array by one. 

#+begin_src c++
int unbounded_knapsack(const vector<int> &wt, const vector<int> &val, int W, int n) {
  vector<vector<int>> dp(n + 1, vector<int>(W + 1, -1));

  REP(i, n + 1) {
    REP(j, W + 1) {
      if (i == 0 || j == 0) {
        dp[i][j] = 0;
        continue;
      }

      if (wt[i - 1] <= j)
        dp[i][j] = max(val[i - 1] + dp[i][j - wt[i - 1]], dp[i - 1][j]);
      else
        dp[i][j] = dp[i - 1][j];
    }
  }

  return dp[n][W];
}
#+end_src

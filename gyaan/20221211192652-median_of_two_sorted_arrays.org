:PROPERTIES:
:ID:       08a8107b-44a2-4ba3-a4bc-9d4edc02b132
:ROAM_REFS: https://www.geeksforgeeks.org/median-of-two-sorted-arrays-of-different-sizes/
:END:
#+title: Median of two sorted arrays
 #+SUBTITLE:This is one of the hardest questions I've ever solved
#+filetags: :CS:

Given two [[id:6a9a5dae-f0b6-4b98-b93a-cfd7238f7595][sorted]] [[id:5adf9d6d-4832-420c-8c61-41d7747a47d1][arrays]] =a[m]= and =b[n]=, we're supposed to find the median of the array we would've obtained upon merging the two arrays.

* Solution
Use [[id:d7ee77e6-ac4d-472b-9e6c-8660076a2b15][two pointer method]].
#+begin_src c++
  double median(const vi& a, const vi& b) {
    int m = (int) a.size(), n = (int) b.size();
    if(m > n) return median(b, a);
    int mid = (m + n + 1) / 2;

    int l = 0, r = m;
    while(l <= r) {
      int partA = l + (r - l) / 2;
      int partB = mid - partA;

      int lA = partA <= 0 ? INT_MIN : a[partA - 1];
      int lB = partB <= 0 ? INT_MIN : b[partB - 1];
      int rA = partA >= m ? INT_MAX : a[partA];
      int rB = partB >= n ? INT_MAX : b[partB];

      if(lA <= rB && lB <= rA) {
        if((m + n) % 2 == 0)
          return (max(lA, lB) + min(rA, rB)) / 2.0;
        else 
          return 1.0 * max(lA, lB);
      } else if(lA > rB) r = partA - 1;

      else if(lB > rA) l = partA + 1;
    }
    return -1;
  }

#+end_src

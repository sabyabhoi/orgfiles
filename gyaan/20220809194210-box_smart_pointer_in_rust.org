:PROPERTIES:
:ID:       12794c42-315a-42c1-b3c0-80a73fcabef1
:END:
#+title: Box smart pointer in Rust
#+filetags: :CS:

In [[id:4208e4ff-6603-46c1-a128-750757d7f217][Rust]], a Box is a smart pointer used to store data on the heap. Here, smart pointer means that when the pointer goes out of scope, the underlying data is automatically deallocated.

* Usage
#+begin_src rust :main yes
let b = Box::new(5);
println!("{}", b);
#+end_src

#+RESULTS:
: 5

The underlying value can be dereferenced as well:
#+begin_src rust :main yes
let mut b = Box::new(5);
*b = 10;
println!("{}", b);
#+end_src

#+RESULTS:
: 10

* Deref trait
:PROPERTIES:
:ID:       08814590-7bc9-47e0-86fc-613b3fcbd031
:END:
The =Box= type implements the =Deref= trait, which returns a [[id:dfc466d8-99a0-488b-9ae7-e5bb58b3ecee][reference]] to the underlying data. Under to hood, using the dereference operator equates to:
#+begin_src rust :main yes
*(b.deref())
#+end_src

** DerefMut trait
:PROPERTIES:
:ID:       a3fa13e7-c157-4ead-9ac3-d6fd7cca12ea
:END:
In order to alter the underlying data of a smart pointer, we need to make use of the =DerefMut= trait.
* Drop trait
:PROPERTIES:
:ID:       70c30878-38c9-4048-8d1f-98a29857a126
:END:
All smart pointers /must/ implement the =Drop= trait, which has a function called =drop=, which is called whenever the the pointer goes out of scope. E.g.
#+begin_src rust
  struct SmartPtr {
      data: String,
  }

  impl Drop for SmartPtr {
      fn drop(&mut self) {
          println!("{} dropped", self.data);
      }
  }

  fn main() {
      let s1 = SmartPtr {
          data: String::from("Hello world"),
      };
      let s2 = SmartPtr {
          data: String::from("Hello sailor"),
      };
  }
#+end_src

#+RESULTS:
: Hello sailor dropped
: Hello world dropped

